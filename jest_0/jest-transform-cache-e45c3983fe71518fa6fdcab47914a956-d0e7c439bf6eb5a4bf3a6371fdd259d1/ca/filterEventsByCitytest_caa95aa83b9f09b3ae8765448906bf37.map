{"version":3,"sources":["filterEventsByCity.test.js"],"names":["feature","test","given","when","then","AppWrapper","update","expect","find","toHaveLength","mockEvents","events","length","CitySearchWrapper","simulate","target","value","and","at","CitySearch","state","toBe"],"mappings":"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","sourcesContent":["import { loadFeature, defineFeature } from 'jest-cucumber';\r\nimport React from 'react';\r\nimport { mount, shallow } from 'enzyme';\r\nimport App from '../App';\r\nimport CitySearch from '../CitySearch';\r\nimport { mockEvents } from '../mock-events';  \r\n\r\n\r\nconst feature = loadFeature('./src/features/filterEventsByCity.feature');\r\n\r\n\r\ndefineFeature(feature, test => {\r\n\r\n    ///SCENARIO 1\r\n  test('By default, when user hasn’t searched for a city, show upcoming events based on the user’s location', ({ given, when, then }) => {\r\n    given('user hasn’t searched for any city', () => {\r\n\r\n    });\r\n\r\n    let AppWrapper;\r\n    when('the user opens the app', () => {\r\n      AppWrapper = mount(<App />);\r\n    });\r\n\r\n    then('the user should see the list of upcoming events from their location', () => {\r\n      AppWrapper.update();\r\n      expect(AppWrapper.find('.Event')).toHaveLength(mockEvents.events.length);\r\n    });\r\n  });\r\n \r\n\r\n\r\n  ///SCENARIO 2\r\n  test('User should see a list of suggestions when they search for a city', ({ given, when, then }) => {\r\n    let CitySearchWrapper;\r\n    given('the main page is open', () => {\r\n      CitySearchWrapper = shallow(<CitySearch />);\r\n    });\r\n\r\n    when('user starts typing in the city textbox', () => {\r\n      CitySearchWrapper.find('.city').simulate('change', { target: { value: 'Munich' } });\r\n    });\r\n\r\n    then('the user should receive a list of cities (suggestions) that match what they’ve typed', () => {\r\n      expect(CitySearchWrapper.find('.suggestions li')).toHaveLength(2);\r\n    });\r\n  });\r\n\r\n  ///SCENARIO 3 \r\n  test('User can select a city from the suggested list', ({ given, and, when, then }) => {\r\n    let AppWrapper;\r\n    given('user was typing “Munich” in the city textbox', () => {\r\n      AppWrapper = mount(<App />);\r\n      AppWrapper.find('.city').simulate('change', { target: { value: 'Munich' } });\r\n    });\r\n\r\n    and('the list of suggested cities is showing', () => {\r\n      AppWrapper.update();\r\n      expect(AppWrapper.find('.suggestions li')).toHaveLength(2);\r\n    });\r\n\r\n    when('the user selects a city (e.g., “Munich, Germany”) from the list', () => {\r\n      AppWrapper.find('.suggestions li').at(0).simulate('click');\r\n    });\r\n\r\n    then('their city should be changed to that city (i.e., “Munich, Germany”)', () => {\r\n      const CitySearchWrapper = AppWrapper.find(CitySearch);\r\n      expect(CitySearchWrapper.state('query')).toBe('Munich, Germany');\r\n    });\r\n\r\n    and('the user should receive a list of upcoming events in that city', () => {\r\n      expect(AppWrapper.find('.Event')).toHaveLength(mockEvents.events.length);\r\n    });\r\n  });\r\n});"]}