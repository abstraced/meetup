{"version":3,"sources":["api.js"],"names":["getAccessToken","accessToken","localStorage","getItem","searchParams","URLSearchParams","window","location","search","code","get","href","getOrRenewAccessToken","lastSavedTime","Date","now","refreshToken","type","key","url","tokenInfo","axios","setItem","data","access_token","refresh_token","getEvents","lat","lon","page","startsWith","mockEvents","token","result","getSuggestions","query","city","country","localized_country_name","name_string","zip","state"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\n\r\nimport { mockEvents } from './mock-events';\r\n\r\n\r\n\r\n\r\n  function getAccessToken() {\r\n    const accessToken = localStorage.getItem('access_token');\r\n\r\n    if (!accessToken) {\r\n      const searchParams = new URLSearchParams(window.location.search);\r\n      const code = searchParams.get('code');\r\n  \r\n      if (!code) {\r\n        window.location.href = 'https://secure.meetup.com/oauth2/authorize?client_id=230kg5vud5f4ukl907980hdqj4&response_type=code&redirect_uri=http://abstraced.github.io/meetup';\r\n        return null;\r\n      }\r\n      \r\n      return getOrRenewAccessToken('get', code);\r\n    }\r\n\r\n    const lastSavedTime = localStorage.getItem('last_saved_time');\r\n\r\n    if (accessToken && (Date.now() - lastSavedTime < 3600000)) {\r\n      return accessToken;\r\n    }\r\n    \r\n     // If the access_token is expired, we try to renew it by using refresh_token\r\n    const refreshToken = localStorage.getItem('refresh_token');\r\n    return getOrRenewAccessToken('renew', refreshToken);\r\n\r\n    \r\n\r\n  }\r\n\r\n  async function getOrRenewAccessToken(type, key) {\r\n    let url;\r\n    if (type === 'get') {\r\n      // Lambda endpoint to get token by code\r\n      url = 'https://9c8wf1t6k9.execute-api.eu-central-1.amazonaws.com/dev/api/token/'\r\n        + key;\r\n    } else if (type === 'renew') {\r\n      // Lambda endpoint to get token by refresh_token\r\n      url = 'https://9c8wf1t6k9.execute-api.eu-central-1.amazonaws.com/dev/api/refreshtoken/'\r\n        + key;\r\n    }\r\n  \r\n    // Use Axios to make a GET request to the endpoint\r\n    const tokenInfo = await axios.get(url);\r\n  \r\n    // Save tokens to localStorage together with a timestamp\r\n    localStorage.setItem('access_token', tokenInfo.data.access_token);\r\n    localStorage.setItem('refresh_token', tokenInfo.data.refresh_token);\r\n    localStorage.setItem('last_saved_time', Date.now());\r\n  \r\n    // Return the access_token\r\n    return tokenInfo.data.access_token;\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n/// GET DATA FROM API\r\n\r\n// GET EVENT\r\n  async function getEvents(lat, lon, page) {\r\n    if (window.location.href.startsWith('http://localhost')) {\r\n    return mockEvents;\r\n  }\r\n  const token = await getAccessToken();\r\n  if (token) {\r\n    let url = 'https://api.meetup.com/find/upcoming_events?&sign=true&photo-host=public'\r\n      + '&access_token=' + token;\r\n    // lat, lon is optional; if you have a lat and lon, you can add them\r\n    if (lat && lon) {\r\n      url += '&lat=' + lat + '&lon=' + lon;\r\n    }\r\n    if (page) {\r\n      url += '&page=' + page;\r\n    }\r\n    if (lat && lon && page) {\r\n      url += '&lat=' + lat + '&lon=' + lon + '&page=' + page;\r\n    }\r\n    const result = await axios.get(url);\r\n    return result.data;\r\n  }\r\n   \r\n  }\r\n\r\n\r\n/// GET SUGGESTIONS\r\n\r\n  async function getSuggestions(query) {\r\n    if (window.location.href.startsWith('http://localhost')) {\r\n      return [\r\n        {\r\n          city: 'Munich',\r\n          country: 'de',\r\n          localized_country_name: 'Germany',\r\n          name_string: 'Munich, Germany',\r\n          zip: 'meetup3',\r\n          lat: 48.14,\r\n          lon: 11.58\r\n        },\r\n        {\r\n          city: 'Munich',\r\n          country: 'us',\r\n          localized_country_name: 'USA',\r\n          state: 'ND',\r\n          name_string: 'Munich, North Dakota, USA',\r\n          zip: '58352',\r\n          lat: 48.66,\r\n          lon: -98.85\r\n        }\r\n      ];\r\n    }\r\n  \r\n    const token = await getAccessToken();\r\n    if (token) {\r\n      const url = 'https://api.meetup.com/find/locations?&sign=true&photo-host=public&query='\r\n        + query\r\n        + '&access_token=' + token;\r\n      const result = await axios.get(url);\r\n      return result.data;\r\n    }\r\n    return [];\r\n  }\r\n\r\n  export { getSuggestions, getEvents, getAccessToken };"]}