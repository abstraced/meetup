2d4cad891ed025bd54e0cb17a500ae4d
"use strict";

var _interopRequireDefault = require("/mnt/c/Users/al/dev/meetup/node_modules/@babel/runtime/helpers/interopRequireDefault");

var _react = _interopRequireDefault(require("react"));

var _enzyme = require("enzyme");

var _App = _interopRequireDefault(require("../App"));

var _EventList = _interopRequireDefault(require("../EventList"));

var _CitySearch = _interopRequireDefault(require("../CitySearch"));

var _EventNumber = _interopRequireDefault(require("../EventNumber"));

var _mockEvents = require("../mock-events");

var _jsxFileName = "/mnt/c/Users/al/dev/meetup/src/__tests__/App.test.js";
describe('<App /> component', () => {
  let AppWrapper;
  beforeAll(() => {
    AppWrapper = (0, _enzyme.shallow)(_react.default.createElement(_App.default, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 13
      },
      __self: void 0
    }));
  });
  test('render list of events', () => {
    expect(AppWrapper.find(_EventList.default)).toHaveLength(1);
  });
  test('render CitySearch', () => {
    expect(AppWrapper.find(_CitySearch.default)).toHaveLength(1);
  });
  test('render EventNumber', () => {
    expect(AppWrapper.find(_EventNumber.default)).toHaveLength(1);
  });
});
describe('<App /> integration', () => {
  test('get list of events after user selects a city', async () => {
    const AppWrapper = (0, _enzyme.mount)(_react.default.createElement(_App.default, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 35
      },
      __self: void 0
    }));
    AppWrapper.instance().updateEvents = jest.fn();
    AppWrapper.instance().forceUpdate();
    const CitySearchWrapper = AppWrapper.find(_CitySearch.default);
    CitySearchWrapper.instance().handleItemClicked('value', 1.1, 1.2);
    expect(AppWrapper.instance().updateEvents).toHaveBeenCalledTimes(1);
    expect(AppWrapper.instance().updateEvents).toHaveBeenCalledWith(1.1, 1.2); // AppWrapper.unmount();
  });
  test('change state after get list of events', async () => {
    const AppWrapper = (0, _enzyme.shallow)(_react.default.createElement(_App.default, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 46
      },
      __self: void 0
    }));
    AppWrapper.instance().updateEvents(1.1, 1.2);
    await AppWrapper.update();
    expect(AppWrapper.state('events')).toEqual(_mockEvents.mockEvents.events); // AppWrapper.unmount();
  });
  test('render correct list of events', () => {
    const AppWrapper = (0, _enzyme.mount)(_react.default.createElement(_App.default, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 55
      },
      __self: void 0
    }));
    AppWrapper.setState({
      events: [{
        id: 1
      }, {
        id: 2
      }, {
        id: 3
      }, {
        id: 4
      }]
    });
    expect(AppWrapper.find('.Event')).toHaveLength(4); // AppWrapper.unmount();
  });
  test('update List of events after user changes number of events', () => {
    const AppWrapper = (0, _enzyme.mount)(_react.default.createElement(_App.default, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 63
      },
      __self: void 0
    }));
    AppWrapper.instance().updateEvents = jest.fn();
    AppWrapper.instance().forceUpdate();
    const EventNumberWrapper = AppWrapper.find(_EventNumber.default);
    EventNumberWrapper.instance().handleInputChanged({
      target: {
        value: 1
      }
    });
    expect(AppWrapper.instance().updateEvents).toHaveBeenCalledTimes(1);
    expect(AppWrapper.instance().updateEvents).toHaveBeenCalledWith(null, null, 1); // AppWrapper.unmount();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkFwcC50ZXN0LmpzIl0sIm5hbWVzIjpbImRlc2NyaWJlIiwiQXBwV3JhcHBlciIsImJlZm9yZUFsbCIsInRlc3QiLCJleHBlY3QiLCJmaW5kIiwiRXZlbnRMaXN0IiwidG9IYXZlTGVuZ3RoIiwiQ2l0eVNlYXJjaCIsIkV2ZW50TnVtYmVyIiwiaW5zdGFuY2UiLCJ1cGRhdGVFdmVudHMiLCJqZXN0IiwiZm4iLCJmb3JjZVVwZGF0ZSIsIkNpdHlTZWFyY2hXcmFwcGVyIiwiaGFuZGxlSXRlbUNsaWNrZWQiLCJ0b0hhdmVCZWVuQ2FsbGVkVGltZXMiLCJ0b0hhdmVCZWVuQ2FsbGVkV2l0aCIsInVwZGF0ZSIsInN0YXRlIiwidG9FcXVhbCIsIm1vY2tFdmVudHMiLCJldmVudHMiLCJzZXRTdGF0ZSIsImlkIiwiRXZlbnROdW1iZXJXcmFwcGVyIiwiaGFuZGxlSW5wdXRDaGFuZ2VkIiwidGFyZ2V0IiwidmFsdWUiXSwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7O0FBR0FBLFFBQVEsQ0FBQyxtQkFBRCxFQUFzQixNQUFNO0FBQ2xDLE1BQUlDLFVBQUo7QUFDQUMsRUFBQUEsU0FBUyxDQUFDLE1BQU07QUFDZEQsSUFBQUEsVUFBVSxHQUFHLHFCQUFRLDZCQUFDLFlBQUQ7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsTUFBUixDQUFiO0FBQ0QsR0FGUSxDQUFUO0FBSUFFLEVBQUFBLElBQUksQ0FBQyx1QkFBRCxFQUEwQixNQUFNO0FBQ2xDQyxJQUFBQSxNQUFNLENBQUNILFVBQVUsQ0FBQ0ksSUFBWCxDQUFnQkMsa0JBQWhCLENBQUQsQ0FBTixDQUFtQ0MsWUFBbkMsQ0FBZ0QsQ0FBaEQ7QUFDRCxHQUZHLENBQUo7QUFJQUosRUFBQUEsSUFBSSxDQUFDLG1CQUFELEVBQXNCLE1BQU07QUFDOUJDLElBQUFBLE1BQU0sQ0FBQ0gsVUFBVSxDQUFDSSxJQUFYLENBQWdCRyxtQkFBaEIsQ0FBRCxDQUFO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QUFBQSxVQUFVLENBQUNTLFFBQVgsR0FBc0JJLFdBQXRCO0FBQ0EsVUFBTVksa0JBQWtCLEdBQUd6QixVQUFVLENBQUNJLElBQVgsQ0FBZ0JJLG9CQUFoQixDQUEzQjtBQUNBaUIsSUFBQUEsa0JBQWtCLENBQUNoQixRQUFuQixHQUE4QmlCLGtCQUE5QixDQUFpRDtBQUFFQyxNQUFBQSxNQUFNLEVBQUU7QUFBRUMsUUFBQUEsS0FBSyxFQUFFO0FBQVQ7QUFBVixLQUFqRDtBQUNBekIsSUFBQUEsTUFBTSxDQUFDSCxVQUFVLENBQUNTLFFBQVgsR0FBc0JDLFlBQXZCLENBQU4sQ0FBMkNNLHFCQUEzQyxDQUFpRSxDQUFqRTtBQUNBYixJQUFBQSxNQUFNLENBQUNILFVBQVUsQ0FBQ1MsUUFBWCxHQUFzQkMsWUFBdkIsQ0FBTixDQUEyQ08sb0JBQTNDLENBQWdFLElBQWhFLEVBQXNFLElBQXRFLEVBQTRFLENBQTVFLEVBUHNFLENBUXRFO0FBQ0QsR0FURyxDQUFKO0FBV0QsQ0F6Q08sQ0FBUiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IHNoYWxsb3csIG1vdW50IH0gZnJvbSAnZW56eW1lJztcclxuaW1wb3J0IEFwcCBmcm9tICcuLi9BcHAnO1xyXG5pbXBvcnQgRXZlbnRMaXN0IGZyb20gJy4uL0V2ZW50TGlzdCc7XHJcbmltcG9ydCBDaXR5U2VhcmNoIGZyb20gJy4uL0NpdHlTZWFyY2gnO1xyXG5pbXBvcnQgRXZlbnROdW1iZXIgZnJvbSAnLi4vRXZlbnROdW1iZXInO1xyXG5pbXBvcnQgeyBtb2NrRXZlbnRzIH0gZnJvbSAnLi4vbW9jay1ldmVudHMnO1xyXG5cclxuXHJcbmRlc2NyaWJlKCc8QXBwIC8+IGNvbXBvbmVudCcsICgpID0+IHtcclxuICBsZXQgQXBwV3JhcHBlcjtcclxuICBiZWZvcmVBbGwoKCkgPT4ge1xyXG4gICAgQXBwV3JhcHBlciA9IHNoYWxsb3coPEFwcC8+KTtcclxuICB9KTtcclxuXHJcbiAgdGVzdCgncmVuZGVyIGxpc3Qgb2YgZXZlbnRzJywgKCkgPT4ge1xyXG4gICAgZXhwZWN0KEFwcFdyYXBwZXIuZmluZChFdmVudExpc3QpKS50b0hhdmVMZW5ndGgoMSk7XHJcbiAgfSk7XHJcblxyXG4gIHRlc3QoJ3JlbmRlciBDaXR5U2VhcmNoJywgKCkgPT4ge1xyXG4gICAgZXhwZWN0KEFwcFdyYXBwZXIuZmluZChDaXR5U2VhcmNoKSkudG9IYXZlTGVuZ3RoKDEpO1xyXG4gIH0pO1xyXG5cclxuICB0ZXN0KCdyZW5kZXIgRXZlbnROdW1iZXInLCAoKSA9PiB7XHJcbiAgICBleHBlY3QoQXBwV3JhcHBlci5maW5kKEV2ZW50TnVtYmVyKSkudG9IYXZlTGVuZ3RoKDEpO1xyXG4gIH0pO1xyXG5cclxuXHJcbn0pO1xyXG5cclxuXHJcbmRlc2NyaWJlKCc8QXBwIC8+IGludGVncmF0aW9uJywgKCkgPT4ge1xyXG5cclxuICB0ZXN0KCdnZXQgbGlzdCBvZiBldmVudHMgYWZ0ZXIgdXNlciBzZWxlY3RzIGEgY2l0eScsIGFzeW5jICgpID0+IHtcclxuICAgIGNvbnN0IEFwcFdyYXBwZXIgPSBtb3VudCg8QXBwIC8+KTtcclxuICAgIEFwcFdyYXBwZXIuaW5zdGFuY2UoKS51cGRhdGVFdmVudHMgPSBqZXN0LmZuKCk7XHJcbiAgICBBcHBXcmFwcGVyLmluc3RhbmNlKCkuZm9yY2VVcGRhdGUoKTtcclxuICAgIGNvbnN0IENpdHlTZWFyY2hXcmFwcGVyID0gQXBwV3JhcHBlci5maW5kKENpdHlTZWFyY2gpO1xyXG4gICAgQ2l0eVNlYXJjaFdyYXBwZXIuaW5zdGFuY2UoKS5oYW5kbGVJdGVtQ2xpY2tlZCgndmFsdWUnLCAxLjEsIDEuMik7XHJcbiAgICBleHBlY3QoQXBwV3JhcHBlci5pbnN0YW5jZSgpLnVwZGF0ZUV2ZW50cykudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpO1xyXG4gICAgZXhwZWN0KEFwcFdyYXBwZXIuaW5zdGFuY2UoKS51cGRhdGVFdmVudHMpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKDEuMSwgMS4yKTtcclxuXHJcbiAgICAvLyBBcHBXcmFwcGVyLnVubW91bnQoKTtcclxuICB9KTtcclxuICB0ZXN0KCdjaGFuZ2Ugc3RhdGUgYWZ0ZXIgZ2V0IGxpc3Qgb2YgZXZlbnRzJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgY29uc3QgQXBwV3JhcHBlciA9IHNoYWxsb3coPEFwcCAvPik7XHJcbiAgICBBcHBXcmFwcGVyLmluc3RhbmNlKCkudXBkYXRlRXZlbnRzKDEuMSwgMS4yKTtcclxuICAgIGF3YWl0IEFwcFdyYXBwZXIudXBkYXRlKCk7XHJcbiAgICBleHBlY3QoQXBwV3JhcHBlci5zdGF0ZSgnZXZlbnRzJykpLnRvRXF1YWwobW9ja0V2ZW50cy5ldmVudHMpO1xyXG4gICAgLy8gQXBwV3JhcHBlci51bm1vdW50KCk7XHJcbiAgfSk7XHJcbiAgXHJcblxyXG4gIHRlc3QoJ3JlbmRlciBjb3JyZWN0IGxpc3Qgb2YgZXZlbnRzJywgKCkgPT4ge1xyXG4gICAgY29uc3QgQXBwV3JhcHBlciA9IG1vdW50KDxBcHAgLz4pO1xyXG4gICAgQXBwV3JhcHBlci5zZXRTdGF0ZSh7IGV2ZW50czogW3sgaWQ6IDEgfSwgeyBpZDogMiB9LCB7IGlkOiAzIH0sIHsgaWQ6IDQgfV0gfSk7XHJcbiAgICBleHBlY3QoQXBwV3JhcHBlci5maW5kKCcuRXZlbnQnKSkudG9IYXZlTGVuZ3RoKDQpO1xyXG4gICAgLy8gQXBwV3JhcHBlci51bm1vdW50KCk7XHJcbiAgXHJcbiAgfSk7XHJcblxyXG4gIHRlc3QoJ3VwZGF0ZSBMaXN0IG9mIGV2ZW50cyBhZnRlciB1c2VyIGNoYW5nZXMgbnVtYmVyIG9mIGV2ZW50cycsICgpID0+IHtcclxuICAgIGNvbnN0IEFwcFdyYXBwZXIgPSBtb3VudCg8QXBwIC8+KTtcclxuICAgIEFwcFdyYXBwZXIuaW5zdGFuY2UoKS51cGRhdGVFdmVudHMgPSBqZXN0LmZuKCk7XHJcbiAgICBBcHBXcmFwcGVyLmluc3RhbmNlKCkuZm9yY2VVcGRhdGUoKTtcclxuICAgIGNvbnN0IEV2ZW50TnVtYmVyV3JhcHBlciA9IEFwcFdyYXBwZXIuZmluZChFdmVudE51bWJlcik7XHJcbiAgICBFdmVudE51bWJlcldyYXBwZXIuaW5zdGFuY2UoKS5oYW5kbGVJbnB1dENoYW5nZWQoeyB0YXJnZXQ6IHsgdmFsdWU6IDEgfSB9KTtcclxuICAgIGV4cGVjdChBcHBXcmFwcGVyLmluc3RhbmNlKCkudXBkYXRlRXZlbnRzKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMSk7XHJcbiAgICBleHBlY3QoQXBwV3JhcHBlci5pbnN0YW5jZSgpLnVwZGF0ZUV2ZW50cykudG9IYXZlQmVlbkNhbGxlZFdpdGgobnVsbCwgbnVsbCwgMSk7XHJcbiAgICAvLyBBcHBXcmFwcGVyLnVubW91bnQoKTtcclxuICB9KTtcclxuXHJcbn0pO1xyXG4iXX0=