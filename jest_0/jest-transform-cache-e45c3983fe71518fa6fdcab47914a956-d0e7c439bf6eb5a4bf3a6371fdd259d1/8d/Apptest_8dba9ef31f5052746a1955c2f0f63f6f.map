{"version":3,"sources":["App.test.js"],"names":["describe","AppWrapper","beforeAll","test","expect","find","EventList","toHaveLength","CitySearch","EventNumber","instance","updateEvents","jest","fn","forceUpdate","CitySearchWrapper","handleItemClicked","toHaveBeenCalledTimes","toHaveBeenCalledWith","update","state","toEqual","mockEvents","events","setState","id","EventNumberWrapper","handleInputChanged","target","value"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { shallow, mount } from 'enzyme';\r\nimport App from '../App';\r\nimport EventList from '../EventList';\r\nimport CitySearch from '../CitySearch';\r\nimport EventNumber from '../EventNumber';\r\nimport { mockEvents } from '../mock-events';\r\n\r\n\r\ndescribe('<App /> component', () => {\r\n  let AppWrapper;\r\n  beforeAll(() => {\r\n    AppWrapper = shallow(<App/>);\r\n  });\r\n\r\n  test('render list of events', () => {\r\n    expect(AppWrapper.find(EventList)).toHaveLength(1);\r\n  });\r\n\r\n  test('render CitySearch', () => {\r\n    expect(AppWrapper.find(CitySearch)).toHaveLength(1);\r\n  });\r\n\r\n  test('render EventNumber', () => {\r\n    expect(AppWrapper.find(EventNumber)).toHaveLength(1);\r\n  });\r\n\r\n\r\n});\r\n\r\n\r\ndescribe('<App /> integration', () => {\r\n\r\n  test('get list of events after user selects a city', async () => {\r\n    const AppWrapper = mount(<App />);\r\n    AppWrapper.instance().updateEvents = jest.fn();\r\n    AppWrapper.instance().forceUpdate();\r\n    const CitySearchWrapper = AppWrapper.find(CitySearch);\r\n    CitySearchWrapper.instance().handleItemClicked('value', 1.1, 1.2);\r\n    expect(AppWrapper.instance().updateEvents).toHaveBeenCalledTimes(1);\r\n    expect(AppWrapper.instance().updateEvents).toHaveBeenCalledWith(1.1, 1.2);\r\n\r\n    // AppWrapper.unmount();\r\n  });\r\n  test('change state after get list of events', async () => {\r\n    const AppWrapper = shallow(<App />);\r\n    AppWrapper.instance().updateEvents(1.1, 1.2);\r\n    await AppWrapper.update();\r\n    expect(AppWrapper.state('events')).toEqual(mockEvents.events);\r\n    // AppWrapper.unmount();\r\n  });\r\n  \r\n\r\n  test('render correct list of events', () => {\r\n    const AppWrapper = mount(<App />);\r\n    AppWrapper.setState({ events: [{ id: 1 }, { id: 2 }, { id: 3 }, { id: 4 }] });\r\n    expect(AppWrapper.find('.Event')).toHaveLength(4);\r\n    // AppWrapper.unmount();\r\n  \r\n  });\r\n\r\n  test('update List of events after user changes number of events', () => {\r\n    const AppWrapper = mount(<App />);\r\n    AppWrapper.instance().updateEvents = jest.fn();\r\n    AppWrapper.instance().forceUpdate();\r\n    const EventNumberWrapper = AppWrapper.find(EventNumber);\r\n    EventNumberWrapper.instance().handleInputChanged({ target: { value: 1 } });\r\n    expect(AppWrapper.instance().updateEvents).toHaveBeenCalledTimes(1);\r\n    expect(AppWrapper.instance().updateEvents).toHaveBeenCalledWith(null, null, 1);\r\n    // AppWrapper.unmount();\r\n  });\r\n\r\n});\r\n"]}