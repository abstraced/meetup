126748839a2711d56d0ff256c9b64179
"use strict";

var _interopRequireDefault = require("/mnt/c/Users/al/dev/meetup/node_modules/@babel/runtime/helpers/interopRequireDefault");

var _react = _interopRequireDefault(require("react"));

var _enzyme = require("enzyme");

var _CitySearch = _interopRequireDefault(require("../CitySearch"));

var _jsxFileName = "/mnt/c/Users/al/dev/meetup/src/__tests__/CitySearch.test.js";
describe('<CitySearch /> component', () => {
  let CitySearchWrapper;
  beforeAll(() => {
    CitySearchWrapper = (0, _enzyme.shallow)(_react.default.createElement(_CitySearch.default, {
      updateEvents: () => {},
      __source: {
        fileName: _jsxFileName,
        lineNumber: 10
      },
      __self: void 0
    }));
  });
  test('render text input', () => {
    expect(CitySearchWrapper.find('.city')).toHaveLength(1);
  });
  test('render list of suggestions', () => {
    expect(CitySearchWrapper.find('.suggestions')).toHaveLength(1);
  });
  test('render list of suggestions', () => {
    const query = CitySearchWrapper.state('query');
    expect(CitySearchWrapper.find('.city').prop('value')).toBe(query);
  });
  test('change state when text input changes', () => {
    const eventObject = {
      target: {
        value: 'Berlin'
      }
    };
    CitySearchWrapper.find('.city').simulate('change', eventObject);
    expect(CitySearchWrapper.state('query')).toBe('Berlin');
  });
  test('render list of suggestions correctly', () => {
    const suggestions = CitySearchWrapper.state('suggestions');
    expect(CitySearchWrapper.find('.suggestions li')).toHaveLength(suggestions.length);

    for (let i = 0; i < suggestions.length; i += 1) {
      expect(CitySearchWrapper.find('.suggestions li').at(i).text()).toBe(suggestions[i].name_string);
    }
  });
  test('click on suggestion should change query state and empty the list of suggestions', () => {
    CitySearchWrapper.setState({
      suggestions: [{
        city: 'Munich',
        country: 'de',
        localized_country_name: 'Germany',
        name_string: 'Munich, Germany',
        zip: 'meetup3',
        lat: 48.14,
        lon: 11.58
      }, {
        city: 'Munich',
        country: 'us',
        localized_country_name: 'USA',
        state: 'ND',
        name_string: 'Munich, North Dakota, USA',
        zip: '58352',
        lat: 48.66,
        lon: -98.85
      }]
    });
    expect(CitySearchWrapper.find('.suggestions li')).toHaveLength(2);
    CitySearchWrapper.find('.suggestions li').at(0).simulate('click');
    expect(CitySearchWrapper.state('query')).toBe('Munich, Germany');
    expect(CitySearchWrapper.find('.suggestions li')).toHaveLength(0);
  });
});
describe('<CitySearch /> integration', () => {
  test('get a list of cities when user searches for Munich', async () => {
    const CitySearchWrapper = (0, _enzyme.shallow)(_react.default.createElement(_CitySearch.default, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 76
      },
      __self: void 0
    }));
    CitySearchWrapper.find('.city').simulate('change', {
      target: {
        value: 'Munich'
      }
    });
    await CitySearchWrapper.update();
    expect(CitySearchWrapper.state('suggestions')).toEqual([{
      city: 'Munich',
      country: 'de',
      localized_country_name: 'Germany',
      name_string: 'Munich, Germany',
      zip: 'meetup3',
      lat: 48.14,
      lon: 11.58
    }, {
      city: 'Munich',
      country: 'us',
      localized_country_name: 'USA',
      state: 'ND',
      name_string: 'Munich, North Dakota, USA',
      zip: '58352',
      lat: 48.66,
      lon: -98.85
    }]);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,