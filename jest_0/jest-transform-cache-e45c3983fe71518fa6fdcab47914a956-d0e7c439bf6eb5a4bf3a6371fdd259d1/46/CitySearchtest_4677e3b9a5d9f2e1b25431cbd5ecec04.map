{"version":3,"sources":["CitySearch.test.js"],"names":["describe","CitySearchWrapper","beforeAll","test","expect","find","toHaveLength","query","state","prop","toBe","eventObject","target","value","simulate","suggestions","length","i","at","text","name_string","setState","city","country","localized_country_name","zip","lat","lon","update","toEqual"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { shallow } from 'enzyme';\r\nimport CitySearch from '../CitySearch';\r\n\r\n\r\n\r\ndescribe('<CitySearch /> component', () => {\r\n    let CitySearchWrapper ;\r\n    beforeAll(() => {\r\n      CitySearchWrapper  = shallow(<CitySearch updateEvents={() => {}}/>);\r\n    });\r\n  \r\n    test('render text input', () => {\r\n      expect(CitySearchWrapper .find('.city')).toHaveLength(1);\r\n    });\r\n  \r\n    test('render list of suggestions', () => {\r\n      expect(CitySearchWrapper .find('.suggestions')).toHaveLength(1);\r\n    });\r\n\r\n\r\n    test('render list of suggestions', () => {\r\n        const query = CitySearchWrapper.state('query');\r\n        expect(CitySearchWrapper.find('.city').prop('value')).toBe(query);\r\n      });\r\n\r\n\r\n    test('change state when text input changes', () => {\r\n        const eventObject = { target: { value: 'Berlin' }};\r\n        CitySearchWrapper .find('.city').simulate('change', eventObject);\r\n        expect(CitySearchWrapper .state('query')).toBe('Berlin');\r\n      });\r\n\r\n\r\n      test('render list of suggestions correctly', () => {\r\n        const suggestions = CitySearchWrapper .state('suggestions');\r\n        expect(CitySearchWrapper .find('.suggestions li')).toHaveLength(suggestions.length);\r\n        for (let i = 0; i < suggestions.length; i += 1) {\r\n          expect(CitySearchWrapper .find('.suggestions li').at(i).text()).toBe(suggestions[i].name_string);\r\n        }\r\n      });\r\n      \r\n      test('click on suggestion should change query state and empty the list of suggestions', () => {\r\n        CitySearchWrapper.setState({\r\n          suggestions: [\r\n            {\r\n              city: 'Munich',\r\n              country: 'de',\r\n              localized_country_name: 'Germany',\r\n              name_string: 'Munich, Germany',\r\n              zip: 'meetup3',\r\n              lat: 48.14,\r\n              lon: 11.58\r\n            },\r\n            {\r\n              city: 'Munich',\r\n              country: 'us',\r\n              localized_country_name: 'USA',\r\n              state: 'ND',\r\n              name_string: 'Munich, North Dakota, USA',\r\n              zip: '58352',\r\n              lat: 48.66,\r\n              lon: -98.85\r\n            }\r\n          ]\r\n        });\r\n        expect(CitySearchWrapper.find('.suggestions li')).toHaveLength(2);\r\n        CitySearchWrapper.find('.suggestions li').at(0).simulate('click');\r\n        expect(CitySearchWrapper.state('query')).toBe('Munich, Germany');\r\n        expect(CitySearchWrapper.find('.suggestions li')).toHaveLength(0);\r\n      });\r\n  });\r\n\r\n  describe('<CitySearch /> integration', () => {\r\n    test('get a list of cities when user searches for Munich', async () => {\r\n      const CitySearchWrapper = shallow(<CitySearch />);\r\n      CitySearchWrapper.find('.city').simulate('change', { target: { value: 'Munich' } });\r\n      await CitySearchWrapper.update();\r\n      expect(CitySearchWrapper.state('suggestions')).toEqual([\r\n          {\r\n            city: 'Munich',\r\n            country: 'de',\r\n            localized_country_name: 'Germany',\r\n            name_string: 'Munich, Germany',\r\n            zip: 'meetup3',\r\n            lat: 48.14,\r\n            lon: 11.58\r\n          },\r\n          {\r\n            city: 'Munich',\r\n            country: 'us',\r\n            localized_country_name: 'USA',\r\n            state: 'ND',\r\n            name_string: 'Munich, North Dakota, USA',\r\n            zip: '58352',\r\n            lat: 48.66,\r\n            lon: -98.85\r\n          }\r\n        ]);\r\n    });\r\n\r\n\r\n  });\r\n"]}