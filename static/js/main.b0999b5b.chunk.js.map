{"version":3,"sources":["Event.js","EventList.js","api.js","Alert.js","CitySearch.js","EventNumber.js","App.js","serviceWorker.js","index.js"],"names":["Event","state","showDetails","toggleDetails","event","setState","className","this","props","local_date","local_time","name","group","who","yes_rsvp_count","venue","address_1","city","localized_country_name","description","visibility","link","onClick","Component","EventList","events","map","key","id","getAccessToken","accessToken","localStorage","getItem","code","URLSearchParams","window","location","search","get","getOrRenewAccessToken","href","lastSavedTime","Date","now","type","a","async","url","axios","tokenInfo","setItem","data","access_token","refresh_token","getEvents","lat","lon","page","token","result","InfoAlert","color","getStyle","style","text","CitySearch","query","suggestions","handleInputChanged","value","target","getSuggestions","then","length","infoText","handleItemClicked","updateEvents","placeholder","onChange","item","name_string","EventNumber","numberOfEvents","App","response","Boolean","hostname","match","ReactDOM","render","document","getElementById","atatus","install"],"mappings":"sQAkEeA,G,iNA7DXC,MAAQ,CACNC,aAAY,G,EAMdC,cAAgB,SAACC,GACb,EAAKC,SAAS,CAAEH,aAAc,EAAKD,MAAMC,e,wEAGrC,IAAD,OAGP,OAGA,yBAAKI,UAAU,SACf,yBAAKA,UAAU,QAAf,SAA6BC,KAAKC,MAAMJ,MAAMK,WAA9C,KAA4DF,KAAKC,MAAMJ,MAAMM,YAC7E,yBAAKJ,UAAU,QAAf,SAA6BC,KAAKC,MAAMJ,MAAMO,MAE9C,yBAAKL,UAAU,OAAf,QACKC,KAAKC,MAAMJ,MAAMQ,MAAUL,KAAKC,MAAMJ,MAAMQ,MAAMC,IAAM,WAK7D,yBAAKP,UAAU,aAAf,cAAuCC,KAAKC,MAAMJ,MAAMU,gBAGrDP,KAAKN,MAAMC,YACb,yBAAKI,UAAU,eACf,yBAAKA,UAAU,WAAf,YACGC,KAAKC,MAAMJ,MAAMW,MAEjBR,KAAKC,MAAMJ,MAAMW,MAAMC,UACxB,KAAQT,KAAKC,MAAMJ,MAAMW,MAAME,KAC/B,KAAOV,KAAKC,MAAMJ,MAAMW,MAAMG,uBAHhC,WAKA,yBAAKZ,UAAU,eAAf,gBAA2CC,KAAKC,MAAMJ,MAAMe,aAC5D,yBAAKb,UAAU,iBAAf,kBAA+CC,KAAKC,MAAMJ,MAAMgB,YAChE,yBAAKd,UAAU,QAAf,WAA+BC,KAAKC,MAAMJ,MAAMiB,KAAhD,KAIA,4BAAQf,UAAU,cAAcgB,QAAS,kBAAM,EAAKnB,kBAApD,mBAEA,4BAAQG,UAAU,cAAcgB,QAAS,kBAAM,EAAKnB,kBAApD,uB,GAlDeoB,cC0BLC,E,2MApBZvB,MAAQ,G,wEAOP,OAEA,wBAAIK,UAAU,aACbC,KAAKC,MAAMiB,OAAOC,KAAI,SAAAtB,GAAK,OAC1B,wBAAIuB,IAAKvB,EAAMwB,IACb,kBAAC,EAAD,CAAOxB,MAAOA,a,GAhBEmB,a,gCCAtB,SAASM,IACP,IAAMC,EAAcC,aAAaC,QAAQ,gBAEzC,IAAKF,EAAa,CAChB,IACMG,EADe,IAAIC,gBAAgBC,OAAOC,SAASC,QAC/BC,IAAI,QAE9B,OAAKL,EAKEM,EAAsB,MAAON,IAJlCE,OAAOC,SAASI,KAAO,oJAChB,MAMX,IAAMC,EAAgBV,aAAaC,QAAQ,mBAE3C,OAAIF,GAAgBY,KAAKC,MAAQF,EAAgB,KACxCX,EAKFS,EAAsB,QADRR,aAAaC,QAAQ,kBAO5C,SAAeO,EAAsBK,EAAMjB,GAA3C,iBAAAkB,EAAAC,OAAA,sDAEe,QAATF,EAEFG,EAAM,2EACFpB,EACc,UAATiB,IAETG,EAAM,kFACFpB,GATR,WAAAkB,EAAA,MAa0BG,IAAMV,IAAIS,IAbpC,cAaQE,EAbR,OAgBElB,aAAamB,QAAQ,eAAgBD,EAAUE,KAAKC,cACpDrB,aAAamB,QAAQ,gBAAiBD,EAAUE,KAAKE,eACrDtB,aAAamB,QAAQ,kBAAmBR,KAAKC,OAlB/C,kBAqBSM,EAAUE,KAAKC,cArBxB,qCA+BA,SAAeE,EAAUC,EAAKC,EAAKC,GAAnC,mBAAAZ,EAAAC,OAAA,kEAAAD,EAAA,MAEoBhB,KAFpB,YAEM6B,EAFN,gCAIMX,EAAM,yFACaW,EAEnBH,GAAOC,IACTT,GAAO,QAAUQ,EAAM,QAAUC,GAE/BC,IACFV,GAAO,SAAWU,GAEhBF,GAAOC,GAAOC,IAChBV,GAAO,QAAUQ,EAAM,QAAUC,EAAM,SAAWC,GAdtD,YAAAZ,EAAA,MAgBuBG,IAAMV,IAAIS,IAhBjC,eAgBQY,EAhBR,yBAiBSA,EAAOR,MAjBhB,sC,ICtCIS,E,YACF,WAAYpD,GAAQ,IAAD,8BACjB,4CAAMA,KACDqD,MAAQ,OAFI,E,uCAxBrB,WAAYrD,GAAQ,IAAD,8BACjB,4CAAMA,KAIRsD,SAAW,WACT,MAAO,CACLD,MAAO,EAAKA,QALd,EAAKA,MAAQ,KAFI,E,sEAYjB,OACE,yBAAKvD,UAAU,SACb,uBAAGyD,MAAOxD,KAAKuD,YAAavD,KAAKC,MAAMwD,W,GAf3BzC,cCuDL0C,E,2MAlDXhE,MAAQ,CACJiE,MAAO,GACPC,YAAa,I,EAMfC,mBAAqB,SAAChE,GACpB,IAAMiE,EAAQjE,EAAMkE,OAAOD,MAC3B,EAAKhE,SAAS,CAAE6D,MAAOG,IFwE7B,SAA8BH,GAA9B,mBAAArB,EAAAC,OAAA,kEAAAD,EAAA,MAGsBhB,KAHtB,YAGQ6B,EAHR,+BAKUX,EAAM,4EACRmB,EACA,iBAAmBR,EAP3B,WAAAb,EAAA,MAQyBG,IAAMV,IAAIS,IARnC,cAQUY,EARV,yBASWA,EAAOR,MATlB,gCAWS,IAXT,sCEvEMoB,CAAeF,GAAOG,MAAK,SAAAL,GACzB,EAAK9D,SAAS,CAAE8D,gBAEZE,GAAgC,IAAvBF,EAAYM,OACvB,EAAKpE,SAAS,CACZqE,SAAU,0EAGZ,EAAKrE,SAAS,CACZqE,SAAU,S,EAMlBC,kBAAoB,SAACN,EAAOd,EAAKC,GAC/B,EAAKnD,SAAS,CAAE6D,MAAOG,EAAOF,YAAY,KAC1C,EAAK3D,MAAMoE,aAAarB,EAAKC,I,wEAGzB,IAAD,OACP,OACI,yBAAKlD,UAAU,cACf,kBAAC,EAAD,CAAW0D,KAAMzD,KAAKN,MAAMyE,WAC5B,2BAAOG,YAAY,OAAOC,SAAUvE,KAAK6D,mBAAqBC,MAAO9D,KAAKN,MAAMiE,MAC9EtB,KAAK,OACLtC,UAAU,SAEb,wBAAIA,UAAU,eAClBC,KAAKN,MAAMkE,YAAYzC,KAAK,SAACqD,GAC1B,OACA,wBAAIzD,QAAS,kBAAM,EAAKqD,kBAAkBI,EAAKC,YAAaD,EAAKxB,IAAKwB,EAAKvB,MAAM7B,IAAKoD,EAAKC,aAAcD,EAAKC,sB,GA5C3FzD,aC2CV0D,E,2MA1CbhF,MAAQ,CACNiF,eAAgB,I,EAGlBd,mBAAqB,SAAChE,GACpB,IAAMiE,EAAQjE,EAAMkE,OAAOD,MAC3B,EAAKhE,SAAS,CAAE6E,eAAgBb,IAChC,EAAK7D,MAAMoE,aAAa,KAAM,KAAMP,GAEhCA,EAAO,EACT,EAAKhE,SAAS,CACZqE,SAAU,sCAGV,EAAKrE,SAAS,CACZqE,SAAU,M,wEAYhB,OACE,yBAAKpE,UAAU,kBACb,qDACA,2BACEsC,KAAK,OACLhB,GAAG,wBACHyC,MAAO9D,KAAKN,MAAMiF,eAClBJ,SAAUvE,KAAK6D,qBAEhB,kBAAC,EAAD,CAAWJ,KAAMzD,KAAKN,MAAMyE,gB,GAtCXnD,aCiDX4D,E,2MAnCblF,MAAQ,CACNwB,OAAQ,GACRgC,KAAM,KACNF,IAAK,KACLC,IAAK,M,EAGPoB,aAAe,SAACrB,EAAKC,EAAKC,GACrBF,GAAOC,EACRF,EAAUC,EAAKC,EAAK,EAAKvD,MAAMwD,MAC9Be,MAAK,SAAAY,GAAQ,OAAI,EAAK/E,SAAS,CAAEoB,OAAQ2D,EAAS3D,OAAQ8B,IAAKA,EAAKC,IAAKA,OAGnEC,EACPH,EAAU,EAAKrD,MAAMsD,IAAK,EAAKtD,MAAMuD,IAAKC,GACzCe,MAAK,SAAAY,GAAQ,OAAI,EAAK/E,SAAS,CAAEoB,OAAQ2D,EAAS3D,OAAQgC,KAAMA,OAGjEH,EAAU,EAAKrD,MAAMsD,IAAK,EAAKtD,MAAMuD,IAAK,EAAKvD,MAAMwD,MACpDe,MAAK,SAAAY,GAAQ,OAAI,EAAK/E,SAAS,CAAEoB,OAAQ2D,EAAS3D,a,mFAvBlC,IAAD,OAClB6B,IAAYkB,MAAK,SAAAY,GAAQ,OAAI,EAAK/E,SAAS,CAAEoB,OAAQ2D,EAAS3D,c,+BA2B9D,OACE,yBAAKnB,UAAU,OACb,kBAAC,EAAD,CAAYsE,aAAcrE,KAAKqE,eAC/B,kBAAC,EAAD,CAAaA,aAAcrE,KAAKqE,eAChC,kBAAC,EAAD,CAAWnD,OAAQlB,KAAKN,MAAMwB,c,GArCpBF,aCGE8D,QACW,cAA7BlD,OAAOC,SAASkD,UAEe,UAA7BnD,OAAOC,SAASkD,UAEhBnD,OAAOC,SAASkD,SAASC,MACvB,2D,YCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SAGjDC,SAAc,oCAAoCC,Y","file":"static/js/main.b0999b5b.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Event extends Component {\r\n    \r\n\r\n    state = {\r\n      showDetails:false,\r\n\r\n\r\n    }\r\n\r\n\r\n    toggleDetails = (event) => {\r\n        this.setState({ showDetails: !this.state.showDetails });\r\n      }\r\n \r\n  render() {\r\n     \r\n\r\n    return (\r\n      \r\n        \r\n    <div className=\"Event\" >\r\n    <div className=\"date\">Date: {this.props.event.local_date}  {this.props.event.local_time}</div>\r\n    <div className=\"what\">What: {this.props.event.name}</div>\r\n\r\n    <div className=\"who\"> Who: \r\n      { (this.props.event.group ) ? this.props.event.group.who : \"Unknown\" }\r\n      \r\n     </div>\r\n\r\n\r\n    <div className=\"attending\">Attending: {this.props.event.yes_rsvp_count}</div>\r\n\r\n\r\n     { this.state.showDetails? \r\n     <div className=\"extra_infos\"> \r\n     <div className=\"address\"> Address: \r\n     { !this.props.event.venue ? \r\n     \"Unknown\"\r\n     :  this.props.event.venue.address_1\r\n     + \", \" +  this.props.event.venue.city\r\n     + \", \" + this.props.event.venue.localized_country_name }\r\n     </div> \r\n     <div className=\"description\">Description: {this.props.event.description}</div> \r\n     <div className=\"type_of_event\">Type of event: {this.props.event.visibility}</div> \r\n     <div className=\"link\"> Link:  {this.props.event.link} </div> \r\n\r\n\r\n\r\n     <button className=\"toggleInfos\" onClick={() => this.toggleDetails()}> Less details </button> \r\n     </div> : \r\n     <button className=\"toggleInfos\" onClick={() => this.toggleDetails()}> More details </button>\r\n     \r\n     \r\n     \r\n     \r\n\r\n     }\r\n         \r\n     \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Event;\r\n\r\n","import React, { Component } from 'react';\r\nimport Event from './Event';\r\n\r\n\r\nclass EventList extends Component {\r\n\r\n\r\n\r\n   state = {\r\n          \r\n        };\r\n     \r\n\r\n\r\n  render() {\r\n    return (\r\n    \r\n    <ul className=\"EventList\">\r\n    {this.props.events.map(event =>\r\n      <li key={event.id}>\r\n        <Event event={event} />\r\n      </li>\r\n    )}\r\n  </ul>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EventList;","import axios from 'axios';\r\n\r\n\r\n\r\n  function getAccessToken() {\r\n    const accessToken = localStorage.getItem('access_token');\r\n\r\n    if (!accessToken) {\r\n      const searchParams = new URLSearchParams(window.location.search);\r\n      const code = searchParams.get('code');\r\n  \r\n      if (!code) {\r\n        window.location.href = 'https://secure.meetup.com/oauth2/authorize?client_id=230kg5vud5f4ukl907980hdqj4&response_type=code&redirect_uri=http://abstraced.github.io/meetup';\r\n        return null;\r\n      }\r\n      \r\n      return getOrRenewAccessToken('get', code);\r\n    }\r\n\r\n    const lastSavedTime = localStorage.getItem('last_saved_time');\r\n\r\n    if (accessToken && (Date.now() - lastSavedTime < 3600000)) {\r\n      return accessToken;\r\n    }\r\n    \r\n     // If the access_token is expired, we try to renew it by using refresh_token\r\n    const refreshToken = localStorage.getItem('refresh_token');\r\n    return getOrRenewAccessToken('renew', refreshToken);\r\n\r\n    \r\n\r\n  }\r\n\r\n  async function getOrRenewAccessToken(type, key) {\r\n    let url;\r\n    if (type === 'get') {\r\n      // Lambda endpoint to get token by code\r\n      url = 'https://9c8wf1t6k9.execute-api.eu-central-1.amazonaws.com/dev/api/token/'\r\n        + key;\r\n    } else if (type === 'renew') {\r\n      // Lambda endpoint to get token by refresh_token\r\n      url = 'https://9c8wf1t6k9.execute-api.eu-central-1.amazonaws.com/dev/api/refreshtoken/'\r\n        + key;\r\n    }\r\n  \r\n    // Use Axios to make a GET request to the endpoint\r\n    const tokenInfo = await axios.get(url);\r\n  \r\n    // Save tokens to localStorage together with a timestamp\r\n    localStorage.setItem('access_token', tokenInfo.data.access_token);\r\n    localStorage.setItem('refresh_token', tokenInfo.data.refresh_token);\r\n    localStorage.setItem('last_saved_time', Date.now());\r\n  \r\n    // Return the access_token\r\n    return tokenInfo.data.access_token;\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n/// GET DATA FROM API\r\n\r\n// GET EVENT\r\n  async function getEvents(lat, lon, page) {\r\n   \r\n  const token = await getAccessToken();\r\n  if (token) {\r\n    let url = 'https://api.meetup.com/find/upcoming_events?&sign=true&photo-host=public'\r\n      + '&access_token=' + token;\r\n    // lat, lon is optional; if you have a lat and lon, you can add them\r\n    if (lat && lon) {\r\n      url += '&lat=' + lat + '&lon=' + lon;\r\n    }\r\n    if (page) {\r\n      url += '&page=' + page;\r\n    }\r\n    if (lat && lon && page) {\r\n      url += '&lat=' + lat + '&lon=' + lon + '&page=' + page;\r\n    }\r\n    const result = await axios.get(url);\r\n    return result.data;\r\n  }\r\n   \r\n  }\r\n\r\n\r\n/// GET SUGGESTIONS\r\n\r\n  async function getSuggestions(query) {\r\n  \r\n  \r\n    const token = await getAccessToken();\r\n    if (token) {\r\n      const url = 'https://api.meetup.com/find/locations?&sign=true&photo-host=public&query='\r\n        + query\r\n        + '&access_token=' + token;\r\n      const result = await axios.get(url);\r\n      return result.data;\r\n    }\r\n    return [];\r\n  }\r\n\r\n  export { getSuggestions, getEvents, getAccessToken };","import React, { Component } from 'react';\r\n\r\nclass Alert extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.color = null;\r\n  }\r\n\r\n  getStyle = () => {\r\n    return {\r\n      color: this.color,\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Alert\">\r\n        <p style={this.getStyle()}>{this.props.text}</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\nclass InfoAlert extends Alert {\r\n    constructor(props) {\r\n      super(props);\r\n      this.color = 'blue';\r\n    }\r\n  }\r\n\r\n\r\n  export { InfoAlert };","import React, { Component } from 'react';\r\nimport { getSuggestions } from './api';\r\n\r\nimport { InfoAlert } from './Alert';\r\n\r\nclass CitySearch extends Component {\r\n\r\n    state = {\r\n        query: '',\r\n        suggestions: []\r\n      };\r\n\r\n     \r\n\r\n\r\n      handleInputChanged = (event) => {\r\n        const value = event.target.value;\r\n        this.setState({ query: value });\r\n        getSuggestions(value).then(suggestions => {\r\n          this.setState({ suggestions });\r\n    \r\n          if (value && suggestions.length === 0) {\r\n            this.setState({\r\n              infoText: 'We can not find the city you are looking for. Please try another city',\r\n            });\r\n          } else {\r\n            this.setState({\r\n              infoText: '',\r\n            });\r\n          }\r\n        });\r\n      };\r\n     \r\n      handleItemClicked = (value, lat, lon) => {\r\n        this.setState({ query: value, suggestions:[] });\r\n        this.props.updateEvents(lat, lon);\r\n      }\r\n\r\n  render() {\r\n    return (\r\n        <div className=\"CitySearch\">\r\n        <InfoAlert text={this.state.infoText} />\r\n        <input placeholder=\"city\" onChange={this.handleInputChanged}  value={this.state.query}\r\n          type=\"text\"\r\n          className=\"city\"\r\n        />\r\n       <ul className=\"suggestions\" >\r\n  {this.state.suggestions.map( (item) => {\r\n      return (\r\n      <li onClick={() => this.handleItemClicked(item.name_string, item.lat, item.lon)} key={item.name_string}>{item.name_string}</li> )\r\n  })}\r\n</ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CitySearch;","import React, { Component } from 'react';\r\n\r\nimport { InfoAlert } from './Alert';\r\n\r\nclass EventNumber extends Component {\r\n\r\n  state = {\r\n    numberOfEvents: 32\r\n  }\r\n\r\n  handleInputChanged = (event) => {\r\n    const value = event.target.value;\r\n    this.setState({ numberOfEvents: value });\r\n    this.props.updateEvents(null, null, value);\r\n\r\n    if (value <1) {\r\n      this.setState({\r\n        infoText: 'The value cannot be negative or 0',\r\n      });\r\n     } else {\r\n        this.setState({\r\n          infoText: '',\r\n        });\r\n\r\n\r\n      \r\n\r\n\r\n    }\r\n\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <div className=\"numberOfEvents\">\r\n        <label>Number of Events: </label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"numberOfEvents__input\"\r\n          value={this.state.numberOfEvents}\r\n          onChange={this.handleInputChanged}\r\n        />\r\n         <InfoAlert text={this.state.infoText} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EventNumber;","import React, { Component } from 'react';\r\nimport './App.css';\r\n\r\n\r\nimport EventList from './EventList';\r\nimport CitySearch from './CitySearch';\r\nimport EventNumber from './EventNumber';\r\nimport { getEvents } from './api';\r\n\r\nclass App extends Component {\r\n\r\n  \r\n\r\n\r\n  componentDidMount() {\r\n    getEvents().then(response => this.setState({ events: response.events }));\r\n  }\r\n\r\n  state = {\r\n    events: [],\r\n    page: null,\r\n    lat: null,\r\n    lon: null\r\n  }\r\n\r\n  updateEvents = (lat, lon, page) => {\r\n    if(lat && lon) {\r\n      getEvents(lat, lon, this.state.page)\r\n      .then(response => this.setState({ events: response.events, lat: lat, lon: lon }));\r\n    }\r\n\r\n    else if (page) {\r\n      getEvents(this.state.lat, this.state.lon, page)\r\n      .then(response => this.setState({ events: response.events, page: page }));\r\n    }\r\n    else {\r\n      getEvents(this.state.lat, this.state.lon, this.state.page)\r\n      .then(response => this.setState({ events: response.events }));\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <CitySearch updateEvents={this.updateEvents} />\r\n        <EventNumber updateEvents={this.updateEvents}  />\r\n        <EventList events={this.state.events} />\r\n        \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\nimport * as atatus from 'atatus-spa';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// serviceWorker.register();\r\natatus.config('adde2723cba74f219e6d43f78ac40f2e').install();\r\n\r\n\r\n\r\n"],"sourceRoot":""}